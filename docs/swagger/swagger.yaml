openapi: 3.0.0
info:
  title: 21hack02 API
  description: spring hackathon
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
  - url: http://main.back-end.hackathon21_spring_02.trap.show/api

tags:
- name: user
- name: composer
- name: file
- name: oauth
paths:
  /users:
    get:
      tags:
        - user
      operationId: getUsers
      summary: 全ユーザー情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      tags:
        - user
      summary: ユーザー詳細情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found
      operationId: getUser
  /users/me:
    get:
      tags:
        - user
      summary: 自分のユーザー情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMe'
        404:
          description: Not Found
      operationId: getMe
  /composers:
    get:
      tags:
        - composer
      operationId: getComposers
      summary: 全投稿者情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Composer'
  /composers/{composerId}:
    parameters:
      - $ref: '#/components/parameters/composerId'
    get:
      tags:
        - composer
      summary: 投稿者詳細情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Composer'
        404:
          description: Not Found
      operationId: getComposer
  /composers/{composerId}/files:
    parameters:
      - $ref: '#/components/parameters/composerId'
    get:
      tags:
        - composer
      summary: 投稿者のファイル情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        404:
          description: Not Found
      operationId: getComposerFiles
  /files:
    get:
      tags:
        - file
      operationId: getFiles
      summary: 全ファイル情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
  /files/random:
    get:
      tags:
        - file
      summary: ファイル詳細情報をランダムに1つ取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        404:
          description: Not Found
      operationId: getRandomFile
  /files/{fileId}:
    parameters:
      - $ref: '#/components/parameters/fileId'
    get:
      tags:
        - file
      summary: ファイル詳細情報の取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        404:
          description: Not Found
      operationId: getFile
  /files/{fileID}/download:
    parameters:
      - $ref: '#/components/parameters/fileId'
    get:
      tags:
        - file
      summary: ファイルのダウンロード
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        404:
          description: Not Found
      operationId: getFileDownload
  /files/{fileId}/favorite:
    parameters:
      - $ref: '#/components/parameters/fileId'
    put:
      tags:
        - file
      summary: ファイルお気に入り情報の変更
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Favorite'
      responses:
        200:
          description: OK
        404:
          description: Not Found
        422:
          description: Unprocessable Entity
      operationId: putFileFavorite
  /oauth/callback:
    parameters:
      - name: code
        in: query
        required: true
        description: OAuth2.0のcode
        schema:
          type: string
    get:
      tags:
        - oauth
      summary: OAuthのコールバック
      description: OAuthのコールバック
      operationId: callback
      responses:
        "200":
          description: 成功
        "302":
          description: 失敗時。認証ページへリダイレクト
  /oauth/generate/code:
    get:
      tags:
        - oauth
      summary: OAuthのcode_challengeとかの取得
      description: OAuthのcode_challengeとかの取得
      operationId: getGeneratedCode
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        "500":
          description: サーバー内エラー
  /oauth/logout:
    post:
      tags:
        - oauth
      summary: ログアウト
      description: ログアウト
      operationId: postLogout
      responses:
        "200":
          description: 成功
        "500":
          description: サーバー内エラー

components:
  parameters:
    userId:
      name: userId
      description: ユーザーUUID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    composerId:
      name: composerId
      description: 投稿者UUID
      in: path
      required: true
      schema:
        type: string
        format: uuid
    fileId:
      name: fileId
      description: ファイルUUID
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    User:
      title: User
      type: object
      description: ユーザー情報
      properties:
        id:
          type: string
          format: uuid
          description: ユーザーUUID
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: ユーザー名
      required:
        - id
        - name
    UserMe:
      title: UserMe
      type: object
      description: 自分の情報
      properties:
        id:
          type: string
          format: uuid
          description: 自分のユーザーUUID
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: 自分のユーザー名
        favoriteFiles:
          type: array
          items:
            $ref: '#/components/schemas/FavoriteFile'
          description: お気に入り曲のUUIDの配列
      required:
        - id
        - name
        - favoriteFiles
    FavoriteFile:
      title: FavoriteFile
      type: string
      format: uuid
      description: お気に入り曲のUUID
    File:
      title: File
      type: object
      description: ファイル情報
      properties:
        id:
          type: string
          format: uuid
          description: ファイルUUID
        title:
          type: string
          description: ファイルのタイトル
        composer_id:
          type: string
          format: uuid
          description: ファイル投稿者UUID
        composer_name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: ファイル投稿者名
        favorite_count:
          type: integer
          description: お気に入り数
        is_favorite_by_me:
          type: boolean
          description: 自分がファイルをお気に入りに追加しているかどうか
        created_at:
          type: string
          format: date-time
          description: 作成日時
      required:
        - id
        - title
        - composer_id
        - composer_name
        - favorite_count
        - is_favorite_by_me
        - created_at
    Favorite:
      title: Favorite
      type: object
      description: お気に入りかどうか
      properties:
        favorite:
          type: boolean
          description: お気に入りかどうか
      required:
        - favorite
    Composer:
      title: Composer
      type: object
      description: 投稿者情報
      properties:
        id:
          type: string
          format: uuid
          description: 投稿者UUID
        name:
          type: string
          pattern: '^[a-zA-Z0-9_-]{1,32}$'
          description: 投稿者名
        post_count:
          type: integer
          description: 投稿数
      required:
        - id
        - name
        - post_count
    Code:
      description: OAuthのコード
      type: object
      properties:
        codeChallenge:
          type: string
        codeChallengeMethod:
          type: string
        clientID:
          type: string
        responseType:
          type: string
      required:
        - codeChallenge
        - codeChallengeMethod
        - clientID
        - responseType
